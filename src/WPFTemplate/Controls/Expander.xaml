<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:WPFTemplate.Controls">
    <Style x:Key="ExpanderHeaderFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border>
                        <Rectangle Margin="0" StrokeDashArray="1 2" Stroke="Black" SnapsToDevicePixels="true" StrokeThickness="1"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ExpanderDownHeaderStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Padding="{TemplateBinding Padding}">
                        <Grid Background="Transparent" SnapsToDevicePixels="False">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="19"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <Ellipse x:Name="circle" Fill="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:Expander}}, Path=StaticCircleFill}" HorizontalAlignment="Center" Height="19" Stroke="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:Expander}}, Path=StaticCircleStroke}" VerticalAlignment="Center" Width="19"/>
                            <Path x:Name="arrow" Data="M 1,1.5 L 4.5,5 L 8,1.5" HorizontalAlignment="Center" Stroke="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:Expander}}, Path=StaticArrowStroke}" SnapsToDevicePixels="false" StrokeThickness="2" VerticalAlignment="Center"/>
                            <ContentPresenter Grid.Column="1" HorizontalAlignment="Left" Margin="4,0,0,0" RecognizesAccessKey="True" SnapsToDevicePixels="True" VerticalAlignment="Center"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Data" TargetName="arrow" Value="M 1,4.5  L 4.5,1  L 8,4.5"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Stroke" TargetName="circle" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:Expander}}, Path=MouseOverCircleStroke}"/>
                            <Setter Property="Fill" TargetName="circle" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:Expander}}, Path=MouseOverCircleFill}"/>
                            <Setter Property="Stroke" TargetName="arrow" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:Expander}}, Path=MouseOverArrowStroke}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Stroke" TargetName="circle" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:Expander}}, Path=PressedCircleStroke}"/>
                            <Setter Property="StrokeThickness" TargetName="circle" Value="1.5"/>
                            <Setter Property="Fill" TargetName="circle" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:Expander}}, Path=PressedCircleFill}"/>
                            <Setter Property="Stroke" TargetName="arrow" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:Expander}}, Path=PressedArrowStroke}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Stroke" TargetName="circle" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:Expander}}, Path=DisabledCircleStroke}"/>
                            <Setter Property="Fill" TargetName="circle" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:Expander}}, Path=DisabledCircleFill}"/>
                            <Setter Property="Stroke" TargetName="arrow" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:Expander}}, Path=DisabledArrowStroke}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ExpanderUpHeaderStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Padding="{TemplateBinding Padding}">
                        <Grid Background="Transparent" SnapsToDevicePixels="False">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="19"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <Grid>
                                <Grid.LayoutTransform>
                                    <TransformGroup>
                                        <TransformGroup.Children>
                                            <TransformCollection>
                                                <RotateTransform Angle="180"/>
                                            </TransformCollection>
                                        </TransformGroup.Children>
                                    </TransformGroup>
                                </Grid.LayoutTransform>
                                <Ellipse x:Name="circle" Fill="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:Expander}}, Path=StaticCircleFill}" HorizontalAlignment="Center" Height="19" Stroke="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:Expander}}, Path=StaticCircleStroke}" VerticalAlignment="Center" Width="19"/>
                                <Path x:Name="arrow" Data="M 1,1.5 L 4.5,5 L 8,1.5" HorizontalAlignment="Center" Stroke="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:Expander}}, Path=StaticArrowStroke}" SnapsToDevicePixels="false" StrokeThickness="2" VerticalAlignment="Center"/>
                            </Grid>
                            <ContentPresenter Grid.Column="1" HorizontalAlignment="Left" Margin="4,0,0,0" RecognizesAccessKey="True" SnapsToDevicePixels="True" VerticalAlignment="Center"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Data" TargetName="arrow" Value="M 1,4.5  L 4.5,1  L 8,4.5"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Stroke" TargetName="circle" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:Expander}}, Path=MouseOverCircleStroke}"/>
                            <Setter Property="Fill" TargetName="circle" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:Expander}}, Path=MouseOverCircleFill}"/>
                            <Setter Property="Stroke" TargetName="arrow" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:Expander}}, Path=MouseOverArrowStroke}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Stroke" TargetName="circle" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:Expander}}, Path=PressedCircleStroke}"/>
                            <Setter Property="StrokeThickness" TargetName="circle" Value="1.5"/>
                            <Setter Property="Fill" TargetName="circle" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:Expander}}, Path=PressedCircleFill}"/>
                            <Setter Property="Stroke" TargetName="arrow" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:Expander}}, Path=PressedArrowStroke}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Stroke" TargetName="circle" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:Expander}}, Path=DisabledCircleStroke}"/>
                            <Setter Property="Fill" TargetName="circle" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:Expander}}, Path=DisabledCircleFill}"/>
                            <Setter Property="Stroke" TargetName="arrow" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:Expander}}, Path=DisabledArrowStroke}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ExpanderLeftHeaderStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Padding="{TemplateBinding Padding}">
                        <Grid Background="Transparent" SnapsToDevicePixels="False">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="19"/>
                                <RowDefinition Height="*"/>
                            </Grid.RowDefinitions>
                            <Grid>
                                <Grid.LayoutTransform>
                                    <TransformGroup>
                                        <TransformGroup.Children>
                                            <TransformCollection>
                                                <RotateTransform Angle="90"/>
                                            </TransformCollection>
                                        </TransformGroup.Children>
                                    </TransformGroup>
                                </Grid.LayoutTransform>
                                <Ellipse x:Name="circle" Fill="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:Expander}}, Path=StaticCircleFill}" HorizontalAlignment="Center" Height="19" Stroke="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:Expander}}, Path=StaticCircleStroke}" VerticalAlignment="Center" Width="19"/>
                                <Path x:Name="arrow" Data="M 1,1.5 L 4.5,5 L 8,1.5" HorizontalAlignment="Center" Stroke="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:Expander}}, Path=StaticArrowStroke}" SnapsToDevicePixels="false" StrokeThickness="2" VerticalAlignment="Center"/>
                            </Grid>
                            <ContentPresenter HorizontalAlignment="Center" Margin="0,4,0,0" RecognizesAccessKey="True" Grid.Row="1" SnapsToDevicePixels="True" VerticalAlignment="Top"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Data" TargetName="arrow" Value="M 1,4.5  L 4.5,1  L 8,4.5"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Stroke" TargetName="circle" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:Expander}}, Path=MouseOverCircleStroke}"/>
                            <Setter Property="Fill" TargetName="circle" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:Expander}}, Path=MouseOverCircleFill}"/>
                            <Setter Property="Stroke" TargetName="arrow" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:Expander}}, Path=MouseOverArrowStroke}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Stroke" TargetName="circle" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:Expander}}, Path=PressedCircleStroke}"/>
                            <Setter Property="StrokeThickness" TargetName="circle" Value="1.5"/>
                            <Setter Property="Fill" TargetName="circle" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:Expander}}, Path=PressedCircleFill}"/>
                            <Setter Property="Stroke" TargetName="arrow" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:Expander}}, Path=PressedArrowStroke}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Stroke" TargetName="circle" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:Expander}}, Path=DisabledCircleStroke}"/>
                            <Setter Property="Fill" TargetName="circle" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:Expander}}, Path=DisabledCircleFill}"/>
                            <Setter Property="Stroke" TargetName="arrow" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:Expander}}, Path=DisabledArrowStroke}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ExpanderRightHeaderStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Padding="{TemplateBinding Padding}">
                        <Grid Background="Transparent" SnapsToDevicePixels="False">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="19"/>
                                <RowDefinition Height="*"/>
                            </Grid.RowDefinitions>
                            <Grid>
                                <Grid.LayoutTransform>
                                    <TransformGroup>
                                        <TransformGroup.Children>
                                            <TransformCollection>
                                                <RotateTransform Angle="-90"/>
                                            </TransformCollection>
                                        </TransformGroup.Children>
                                    </TransformGroup>
                                </Grid.LayoutTransform>
                                <Ellipse x:Name="circle" Fill="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:Expander}}, Path=StaticCircleFill}" HorizontalAlignment="Center" Height="19" Stroke="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:Expander}}, Path=StaticCircleStroke}" VerticalAlignment="Center" Width="19"/>
                                <Path x:Name="arrow" Data="M 1,1.5 L 4.5,5 L 8,1.5" HorizontalAlignment="Center" Stroke="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:Expander}}, Path=StaticArrowStroke}" SnapsToDevicePixels="false" StrokeThickness="2" VerticalAlignment="Center"/>
                            </Grid>
                            <ContentPresenter HorizontalAlignment="Center" Margin="0,4,0,0" RecognizesAccessKey="True" Grid.Row="1" SnapsToDevicePixels="True" VerticalAlignment="Top"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Data" TargetName="arrow" Value="M 1,4.5  L 4.5,1  L 8,4.5"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Stroke" TargetName="circle" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:Expander}}, Path=MouseOverCircleStroke}"/>
                            <Setter Property="Fill" TargetName="circle" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:Expander}}, Path=MouseOverCircleFill}"/>
                            <Setter Property="Stroke" TargetName="arrow" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:Expander}}, Path=MouseOverArrowStroke}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Stroke" TargetName="circle" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:Expander}}, Path=PressedCircleStroke}"/>
                            <Setter Property="StrokeThickness" TargetName="circle" Value="1.5"/>
                            <Setter Property="Fill" TargetName="circle" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:Expander}}, Path=PressedCircleFill}"/>
                            <Setter Property="Stroke" TargetName="arrow" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:Expander}}, Path=PressedArrowStroke}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Stroke" TargetName="circle" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:Expander}}, Path=DisabledCircleStroke}"/>
                            <Setter Property="Fill" TargetName="circle" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:Expander}}, Path=DisabledCircleFill}"/>
                            <Setter Property="Stroke" TargetName="arrow" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:Expander}}, Path=DisabledArrowStroke}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="Expander" TargetType="{x:Type Expander}">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Stretch"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Expander}">
                    <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="3" SnapsToDevicePixels="true">
                        <DockPanel>
                            <ToggleButton x:Name="HeaderSite" ContentTemplate="{TemplateBinding HeaderTemplate}" Content="{TemplateBinding Header}" ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}" DockPanel.Dock="Top" FontStretch="{TemplateBinding FontStretch}" Foreground="{TemplateBinding Foreground}" FocusVisualStyle="{StaticResource ExpanderHeaderFocusVisual}" FontStyle="{TemplateBinding FontStyle}" FontFamily="{TemplateBinding FontFamily}" FontWeight="{TemplateBinding FontWeight}" FontSize="{TemplateBinding FontSize}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Margin="1" MinWidth="0" MinHeight="0" Padding="{TemplateBinding Padding}" Style="{StaticResource ExpanderDownHeaderStyle}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            <ContentPresenter x:Name="ExpandSite" DockPanel.Dock="Bottom" Focusable="false" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Visibility="Collapsed"/>
                        </DockPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="true">
                            <Setter Property="Visibility" TargetName="ExpandSite" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="ExpandDirection" Value="Right">
                            <Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Right"/>
                            <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Left"/>
                            <Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource ExpanderRightHeaderStyle}"/>
                        </Trigger>
                        <Trigger Property="ExpandDirection" Value="Up">
                            <Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Top"/>
                            <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Bottom"/>
                            <Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource ExpanderUpHeaderStyle}"/>
                        </Trigger>
                        <Trigger Property="ExpandDirection" Value="Left">
                            <Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Left"/>
                            <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Right"/>
                            <Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource ExpanderLeftHeaderStyle}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>